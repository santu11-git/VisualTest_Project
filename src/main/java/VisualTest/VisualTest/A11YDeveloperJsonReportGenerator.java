package VisualTest.VisualTest;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Date;

public class A11YDeveloperJsonReportGenerator {

    /**
     * Generates a clean developer-facing JSON report from the raw axe-core JSON
     *
     * @param rawJsonFilePath path of the raw JSON file generated by axe-core
     * @param outputDir       output directory where summary JSON will be saved
     * @param timestamp       timestamp for unique naming
     * @return path of the summary JSON
     */
    public static String generateDeveloperSummary(String rawJsonFilePath, String outputDir, String timestamp) {
        String summaryPath = null;
        try {
            File rawFile = new File(rawJsonFilePath);
            if (!rawFile.exists()) {
                System.out.println("‚ö†Ô∏è Raw JSON file not found: " + rawJsonFilePath);
                return null;
            }

            String rawContent = new String(Files.readAllBytes(rawFile.toPath()));
            JSONObject rawJson = new JSONObject(rawContent);

            // Extract only violations[]
            JSONArray violations = rawJson.optJSONArray("violations");
            if (violations == null || violations.length() == 0) {
                System.out.println("‚úÖ No accessibility violations found in raw JSON.");
                return null;
            }

            JSONArray cleanViolations = new JSONArray();

            for (int i = 0; i < violations.length(); i++) {
                JSONObject violation = violations.getJSONObject(i);
                JSONObject clean = new JSONObject();

                clean.put("rule", violation.optString("id", "N/A"));
                clean.put("impact", violation.optString("impact", "N/A"));
                clean.put("description", violation.optString("description", "N/A"));
                clean.put("helpUrl", violation.optString("helpUrl", "N/A"));

                JSONArray nodes = violation.optJSONArray("nodes");
                if (nodes != null && nodes.length() > 0) {
                    JSONObject node = nodes.getJSONObject(0);

                    clean.put("target", node.optJSONArray("target"));
                    clean.put("htmlSnippet", node.optString("html", "N/A"));
                    clean.put("failureSummary", node.optString("failureSummary", "N/A"));
                }

                cleanViolations.put(clean);
            }

            JSONObject summaryJson = new JSONObject();
            summaryJson.put("reportGenerated", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            summaryJson.put("totalViolations", cleanViolations.length());
            summaryJson.put("violations", cleanViolations);

            File summaryFile = new File(outputDir, "A11Y_Violation_Summary_" + timestamp + ".json");
            try (FileWriter writer = new FileWriter(summaryFile)) {
                writer.write(summaryJson.toString(4)); // pretty print with indent
            }

            summaryPath = summaryFile.getAbsolutePath();
            System.out.println("üìÑ Clean Developer JSON saved at: " + summaryPath);

        } catch (Exception e) {
            System.out.println("‚ùå Error generating developer JSON summary: " + e.getMessage());
        }
        return summaryPath;
    }
}
